import numpy as np  # This line stays in your code
from collections import Counter  # Built-in, no install needed

class Node:
    def __init__(self, feature=None, threshold=None, left=None, right=None,*,value=None): 
        self.feature = feature 
        self.threshold = threshold 
        self.left = left
        self.right = right
        self.value = value  

# The code below defines a Node, which acts as either a decision point or a final prediction 
# within the decision tree. In the context of this study, a node may represent a financial 
# condition such as whether an individual has emergency savings, reports high financial 
# satisfaction, or falls above a certain income threshold. The constructor 'def __init__' allows 
# Python to create a new node each time the model needs to ask a question or store a prediction. 
# The feature argument records which financial variable is being tested, while threshold specifies 
# the cutoff used to divide participants into two groups (for example, income levels above or below 
# a certain bracket). The left and right parameters connect the current node to its subsequent branches, 
# where left handles individuals who meet the condition and right handles those who do not. 

# The asterisk * before value enforces that value can only be provided as a keyword argument, 
# making it clear that it should only be used when the node is a final outcome rather than a 
# decision point. When provided, value stores the predicted result (e.g., high or low risk tolerance), 
# and the use of self ensures that each node keeps its own information independent from other nodes. 
# Together, these components translate human-style financial reasoning into a structured and programmable form.

    def is_leaf_node(self, min_sample_split=2, max_depth=100, n_features=None):
        return self.value is not None
# The is_leaf_node method checks if the current node is a leaf node, which means it contains a final prediction
# rather than a decision point. In the context of financial decision-making, a leaf node might represent a conclusion such as 
# "high risk tolerance" or "low risk tolerance" based on the analysis of various financial factors. 

# The method returns True if the node has a value assigned, indicating that it is indeed a leaf node. 
# The parameters min_sample_split, max_depth, and n_features are included for consistency with the overall decision tree structure, 
# but they are not directly used in this method. The use of self ensures that the method checks the specific instance of the node.
# These components are adapted from Breiman et al. (2017)

class DecisionTree:
    def __init__(self, min_sample_split=2, max_depth=100, n_features=None):
        self.min_sample_split = min_sample_split 
        self.max_depth = max_depth
        self.n_features = n_features
        self.root = None
# This code defines a DecisionTree, which serves as the main structure for building and using a decision tree model.
# The constructor 'def __init__' initializes the tree with specific parameters that control its growth and complexity.
# The min_sample_split parameter sets the minimum number of samples required to split a node, ensuring that the tree 
# does not create overly specific branches based on too few data points.

# The max_depth parameter limits how deep the tree can grow, preventing it from becoming too complex and overfitting 
# the training data.

# The n_features parameter allows for the selection of a subset of features to consider at each split, 
# which can help improve the model's performance and reduce computation time.

# The root is initialized to None and will later hold the topmost node of the tree once it is built

    def fit(self, X, y):
        self.n_features = X.shape[1] if not self.n_features else min(self.n_features, X.shape[1])
        self.root = self.__grow__tree(X, y)
    # This code defines the training (or “fitting”) process for a decision tree model in Python. 
    # The fit method takes three parameters—self, X, and y. In Python classes, self represents 
    # the specific instance of the model being created; it lets the model remember what’s being 
    # stored inside it, such as learned parameters or structure. The variable X stands for the 
    # input data that contains all the predictor variables (similar to independent variables in statistics), 
    # and y represents the outcome or target variable the model will learn to predict. 
    
    # The first line inside the method, self.n_features = X.shape[1] if not self.n_features 
    # else min(self.n_features, X.shape[1]), tells Python to check how many columns (features) 
    # are in X and either set or limit that number based on what was previously defined. In simpler terms, this line determines how many variables the tree should consider 
    # during training. 
    # 
    # The second line, self.root = self.__grow__tree(X, y), calls another function that begins building 
    # the decision tree structure by finding the best way to split the data at each step. Altogether, 
    # this block of code shows how Python uses methods, attributes (like self.n_features), and functions 
    # (like __grow__tree) to teach a machine learning model how to learn patterns from data.


    def __grow__tree(self, X, y, depth=0):
        n_samples, n_features = X.shape
        n_labels = len(np.unique(y))

        # Check the stopping criteria
        if (depth>=self.max_depth or n_labels==1 or n_samples<self.min_sample_split):
            leaf_value = self._most_common_label(y)
            return Node(value=leaf_value)

        feat_idxs = np.random.choice(n_features, self.n_features, replace=False)

        # Find the best split
        best_feature, best_threshold = self.__best__split(X, y, feat_idxs)
    
        # Create child nodes
        left_idxs, right_idxs = self._split(X[:, best_feature], best_threshold)
        left = self.__grow__tree(X[left_idxs, :], y[left_idxs], depth+1)
        right = self.__grow__tree(X[right_idxs, :], y[right_idxs], depth+1)
        return Node(best_feature, best_threshold, left, right)

    def __best__split(self, X, y, feat_idxs):
        best_gain = -1
        split_idx, split_threshold = None, None

        for feat_idx in feat_idxs:
            X_column = X[:, feat_idx]
            thresholds = np.unique(X_column)

            for thr in thresholds:
                gain = self._information_gain(y, X_column, thr)

                if gain > best_gain:
                    best_gain = gain
                    split_idx = feat_idx
                    split_threshold = thr


        return split_idx, split_threshold
    


    def _information_gain(self, y, X_column, threshold):
        # Parent entropy
        parent_entropy = self._entropy(y)

        # Generate split
        left_idxs, right_idxs = self._split(X_column, threshold)

        if len(left_idxs) == 0 or len(right_idxs) == 0:
            return 0

        # Weighted average child entropy
        n = len(y)
        n_left, n_right = len(left_idxs), len(right_idxs)
        e_left, e_right = self._entropy(y[left_idxs]), self._entropy(y[right_idxs])
        child_entropy = (n_left / n) * e_left + (n_right / n) * e_right

        # Information gain is difference in entropy
        information_gain = parent_entropy - child_entropy
        return information_gain
    
    def _split(self, X_column, split_threshold):
        left_idxs = np.argwhere(X_column <= split_threshold).flatten()
        right_idxs = np.argwhere(X_column > split_threshold).flatten()
        return left_idxs, right_idxs
    
    def _entropy(self, y):
        hist = np.bincount(y)
        ps = hist / len(y)
        return -np.sum([p * np.log2(p) for p in ps if p > 0])
    
    def _most_common_label(self, y):
        counter = Counter(y)
        most_common = counter.most_common(1)[0][0]
        return most_common
    
    def predict(self, X):
        return np.array([self._traverse_tree(x, self.root) for x in X])
    
    def _traverse_tree(self, x, node):
        if node.is_leaf_node():
            return node.value
        
        if x[node.feature] <= node.threshold:
            return self._traverse_tree(x, node.left)
        return self._traverse_tree(x, node.right)
    